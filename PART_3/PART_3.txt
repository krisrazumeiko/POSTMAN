PART_3 Postman


1) необходимо залогиниться
POST
http://162.55.220.72:5005/login
login : str (кроме /)
password : str

Приходящий токен необходимо передать во все остальные запросы.

===================
дальше все запросы требуют наличие токена.
===================

2) http://162.55.220.72:5005/user_info
req. (RAW JSON)
POST
age: int
salary: int
name: str
auth_token


resp.
{'start_qa_salary':salary,
 'qa_salary_after_6_months': salary * 2,
 'qa_salary_after_12_months': salary * 2.9,
 'person': {'u_name':[user_name, salary, age],
                                'u_age':age,
                                'u_salary_1.5_year': salary * 4}
                                }

Тесты:
1) Статус код 200
    pm.test("Status code is 200", function () {
        pm.response.to.have.status(200);
    });


2) Проверка структуры json в ответе.
    let jsonData = pm.response.json(); //parse JsonData to json file

    let schema = {
      "type": "object",
      "properties": {
        "person": {
          "type": "object",
          "properties": {
            "u_age": {
              "type": "integer"
            },
            "u_name": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "u_salary_1_5_year": {
              "type": "integer"
            }
          },
          "required": [
            "u_age",
            "u_name",
            "u_salary_1_5_year"
          ]
        },
        "qa_salary_after_12_months": {
          "type": "number"
        },
        "qa_salary_after_6_months": {
          "type": "integer"
        },
        "start_qa_salary": {
          "type": "integer"
        }
      },
      "required": [
        "person",
        "qa_salary_after_12_months",
        "qa_salary_after_6_months",
        "start_qa_salary"
      ]
    };

    pm.test('Schema is true', function() {
      pm.expect(tv4.validate(jsonData, schema)).to.be.true;
    });


3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.
    let start_salary = jsonData.start_qa_salary;
    let salary_6_m = jsonData.qa_salary_after_6_months;
    let salary_12_m = jsonData.qa_salary_after_12_months;
    let salary_1_5_year = jsonData.person.u_salary_1_5_year;

    pm.test("Check the result of multiplying the salary by coefficients", function () {
        pm.expect(salary_6_m).to.eql(start_salary * 2);
        pm.expect(salary_12_m).to.eql(start_salary * 2.9);
        pm.expect(salary_1_5_year).to.eql(start_salary * 4);
    });


4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user
    pm.environment.set("u_salary_1.5_year", jsonData.person.u_salary_1_5_year);
    let salaryEnv = pm.environment.get("u_salary_1.5_year");


===================


3) http://162.55.220.72:5005/new_data
req.
POST
age: int
salary: int
name: str
auth_token

Resp.
{'name':name,
  'age': int(age),
  'salary': [salary, str(salary*2), str(salary*3)]}

Тесты:
1) Статус код 200
    pm.test("Status code is 200", function () {
        pm.response.to.have.status(200);
    });


2) Проверка структуры json в ответе.
    let jsonData = pm.response.json();
    let schema = {
      "type": "object",
      "properties": {
        "age": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "salary": {
          "type": "array",
          "items": [
            {
              "type": "integer"
            },
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "required": [
        "age",
        "name",
        "salary"
      ]
    };

    pm.test('Schema is true', function () {
        pm.expect(tv4.validate(jsonData, schema)).to.be.true;
    });


3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.
    let start_salary = jsonData.salary[0];
    let salary_x2 = jsonData.salary[1];
    let salary_x3 = jsonData.salary[2];

    pm.test("Check the result of multiplying the salary by coefficients", function () {
        pm.expect(start_salary).to.eql(1000);
        pm.expect(parseInt(salary_x2)).to.eql(start_salary * 2);
        pm.expect(parseInt(salary_x3)).to.eql(start_salary * 3);
    });


4) проверить, что 2-й элемент массива salary больше 1-го и 0-го
    let salaryArr = jsonData.salary;
    let n = 1;
    for(let i = 0; i < n; i++){
        if(salaryArr[2] > salaryArr[0] && salaryArr[2] > salaryArr[1]){
        console.log("Salary_x3 more than others");
        } 
        else {
            console.log("Salary_x3 less than others!!!")
        } 
    }


===================


4) http://162.55.220.72:5005/test_pet_info
req.
POST
age: int
weight: int
name: str
auth_token


Resp.
{'name': name,
 'age': age,
 'daily_food':weight * 0.012,
 'daily_sleep': weight * 2.5}


Тесты:
1) Статус код 200
    pm.test("Status code is 200", function () {
        pm.response.to.have.status(200);
    });


2) Проверка структуры json в ответе.
    let jsonData = pm.response.json();

    let schema = {
        "type": "object",
      "properties": {
        "age": {
          "type": "integer"
        },
        "daily_food": {
          "type": "number"
        },
        "daily_sleep": {
          "type": "number"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "age",
        "daily_food",
        "daily_sleep",
        "name"
      ]
    };

    pm.test('Schema is true', function () {
        pm.expect(tv4.validate(jsonData, schema)).to.be.true;
    });


3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.
    let daily_food_weight = jsonData.daily_food;
    let daily_sleep_weight = jsonData.daily_sleep;
    let weight_start = pm.environment.get("weight");

    pm.test("Check the result of weight", function () {
        pm.expect(daily_food_weight).to.eql(weight_start * 0.012);
        pm.expect(daily_sleep_weight).to.eql(weight_start * 2.5);
    });


===================


5) http://162.55.220.72:5005/get_test_user
req.
POST
age: int
salary: int
name: str
auth_token

Resp.
{'name': name,
 'age':age,
 'salary': salary,
 'family':{'children':[['Alex', 24],['Kate', 12]],
 'u_salary_1.5_year': salary * 4}
  }

Тесты:
1) Статус код 200
    pm.test("Status code is 200", function () {
        pm.response.to.have.status(200);
    });


2) Проверка структуры json в ответе.
    let jsonData = pm.response.json();

    let schema = {
        "type": "object",
      "properties": {
        "age": {
          "type": "string"
        },
        "family": {
          "type": "object",
          "properties": {
            "children": {
              "type": "array",
              "items": [
                {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    }
                  ]
                }
              ]
            },
            "u_salary_1_5_year": {
              "type": "integer"
            }
          },
          "required": [
            "children",
            "u_salary_1_5_year"
          ]
        },
        "name": {
          "type": "string"
        },
        "salary": {
          "type": "integer"
        }
      },
      "required": [
        "age",
        "family",
        "name",
        "salary"
      ]
    };

    pm.test('Schema is true', function () {
        pm.expect(tv4.validate(jsonData, schema)).to.be.true;
    });


3) Проверить что занчение поля name = значению переменной name из окружения
    let nameEnv = pm.environment.get("name");
    pm.test("Check name = name from environment", function () {
        pm.expect(jsonData.name).to.eql(nameEnv);
    });


4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age
    let reqAge = request.data.age;
    pm.test("Check name from response = name from request", function () {
        pm.expect(jsonData.age).to.eql(reqAge);
    });