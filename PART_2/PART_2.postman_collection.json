{
	"info": {
		"_postman_id": "6ec32668-f04f-424b-9709-f18b66d9007d",
		"name": "PART_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20506298"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Check NAME response = NAME request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Jhon\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check AGE response = AGE request\", function () {\r",
							"    pm.expect(+jsonData.age).to.eql(35);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check SALARY response = SALARY request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(3000);\r",
							"});\r",
							"\r",
							"\r",
							"let reqData = request.data;\r",
							"\r",
							"\r",
							"pm.test(\"Check NAME response =  NAME from request\", function () {\r",
							"    let reqName = reqData.name;\r",
							"    pm.expect(jsonData.name).to.eql(reqName);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check AGE response =  AGE from request\", function () {\r",
							"    let reqAge = reqData.age;\r",
							"    pm.expect(jsonData.age).to.eql(reqAge);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check SALARY response =  SALARY from request\", function () {\r",
							"    let reqSalary = reqData.salary;\r",
							"    pm.expect(jsonData.salary).to.eql(+reqSalary);\r",
							"});\r",
							"\r",
							"\r",
							"console.log(\"family =\", jsonData.family);\r",
							"\r",
							"\r",
							"pm.test(\"Check u_salary_1_5_year response =  u_salary_1_5_year from request\", function () {\r",
							"    let reqSalary = reqData.salary;\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(reqSalary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();// забрали данные из response body в json (спарсили respons body в json)\r",
							"let reqData = pm.request.url.query.toObject(); // забрали данные из request\r",
							"\r",
							"\r",
							"pm.test(\"Check NAME from request\", function () {\r",
							"    let reqName = reqData.name;\r",
							"    pm.expect(jsonData.name).to.eql(reqName);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check AGE from request\", function () {\r",
							"    let reqAge = reqData.age;\r",
							"    pm.expect(jsonData.age).to.eql(reqAge);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check SALARY from request\", function () {\r",
							"    let reqSalary = reqData.salary;\r",
							"    pm.expect(jsonData.salary).to.eql(parseInt(reqSalary)); // parseInt - str to int; or use +\r",
							"});\r",
							"\r",
							"\r",
							"console.log(\"Параметр family из response\", jsonData.family);\r",
							"\r",
							"\r",
							"pm.test(\"Check NAME parameter IN DOG parameter\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check AGE parameter IN DOG parameter\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check NAME parameter = Lucky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check AGE parameter = 4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();// забрали данные из response body в json (спарсили respons body в json)\r",
							"let reqData = pm.request.url.query.toObject(); // забрали данные из request\r",
							"let reqSalary = reqData.salary;\r",
							"let respSalary = jsonData.salary;\r",
							"\r",
							"\r",
							"pm.test(\"Check NAME\", function () {\r",
							"    let reqName = reqData.name;\r",
							"    pm.expect(jsonData.name).to.eql(reqName);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check AGE\", function () {\r",
							"   let reqAge = reqData.age; \r",
							"   pm.expect(jsonData.age).to.eql(parseInt(reqAge));\r",
							"});\r",
							"\r",
							"\r",
							"console.log(\"salary from request\", reqData.salary);\r",
							"\r",
							"\r",
							"console.log(\"salary from response\", jsonData.salary);\r",
							"\r",
							"\r",
							"console.log(\"0-th element of parameter salary from response:\", respSalary[0]);\r",
							"\r",
							"\r",
							"console.log(\"1-st element of parameter salary from response:\", respSalary[1]);\r",
							"\r",
							"\r",
							"console.log(\"2-nd element of parameter salary from response:\", respSalary[2]);\r",
							"\r",
							"\r",
							"pm.test(\"salary[0] from response = SALARY from request\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(parseInt(reqSalary));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"salary[1] from response = SALARY*2 from request\", function () {\r",
							"    pm.expect(parseInt(jsonData.salary[1])).to.eql(reqSalary*2);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"salary[2] from response = SALARY*3 from request\", function () {\r",
							"    pm.expect(parseInt(jsonData.salary[2])).to.eql(reqSalary*3);\r",
							"});\r",
							"\r",
							"\r",
							"//task 15-20\r",
							"pm.environment.set(\"name\", reqData.name);\r",
							"pm.environment.set(\"age\", reqData.age);\r",
							"pm.environment.set(\"salary\", reqData.salary);\r",
							"\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let n = [jsonData.salary.length];\r",
							"\r",
							"for (let i = 0; i < n; i++) {\r",
							"  console.log(\"salary\", jsonData.salary[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"let reqData = request.data;\r",
							"\r",
							"\r",
							"pm.test(\"json response has start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"json response has qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"json response has qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"json response has qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"json response has qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"json response has person\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"start_qa_salary from response = SALARY from request\", function () {\r",
							"    let reqSalary = reqData.salary;\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+reqSalary);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months from response = SALARY*2 from request\", function () {\r",
							"    let reqSalary = reqData.salary;\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(reqSalary*2);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months from response = SALARY*2 from request\", function () {\r",
							"    let reqSalary = reqData.salary;\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(parseFloat(reqSalary*2.7));\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"// You can access the properties of an object in JavaScript in 3 ways:\r",
							"    // Dot property accessor: object.property\r",
							"    // Square brackets property accessor: object['property']\r",
							"    // Object destructuring: const { property } = object\r",
							"pm.test(\"qa_salary_after_1.5_year from response = SALARY*3.3 from request\", function () {\r",
							"    let reqSalary = reqData.salary;\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(parseFloat(reqSalary*3.3));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years from response = SALARY*3.8 from request\", function () {\r",
							"    let reqSalary = reqData.salary;\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(parseFloat(reqSalary*3.8));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"u_name[1] from respose = SALARY from request\", function () {\r",
							"    let reqSalary = reqData.salary;\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+reqSalary);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"u_age from respose = AGE from request\", function () {\r",
							"    let reqAge = reqData.age;\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+reqAge);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"u_salary_5_years from response = SALARY*4.2 from request\", function () {\r",
							"    let reqSalary = reqData.salary;\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(parseFloat(reqSalary*4.2));\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let personArr = [jsonData.person];\r",
							"\r",
							"for (let i = 0; i < personArr.length; i++) {\r",
							"\tconsole.log(\"Элементы массива person:\", personArr[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}