{
	"info": {
		"_postman_id": "f5764e80-e653-4f67-af89-ed800d2073f3",
		"name": "PART_2_postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20506298"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();// забрали данные из response body в json (спарсили respons body в json)\r",
							"let reqData = request.data; // забрали данные из request\r",
							"let reqName = reqData.name; // переменной reqName присвоили свойство объекта \r",
							"let reqAge = reqData.age;\r",
							"let reqSalary = reqData.salary;\r",
							"\r",
							"//console.log(reqName); // вывели в консоль значение свойства name \r",
							"\r",
							"\r",
							"//MANUAL CHECK\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Manual NAME check. \", function () {\r",
							"    pm.expect(jsonData.name).to.eql('Kristina');\r",
							"});\r",
							"\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Manual AGE check\", function () {\r",
							"    //console.log(typeof jsonData.age,typeof 31);\r",
							"    pm.expect(parseInt(jsonData.age)).to.eql(31); //parseInt - str to int\r",
							"});\r",
							"\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Manual SALARY check\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(parseInt(reqSalary));\r",
							"});\r",
							"\r",
							"\r",
							"//CHECK FROM REQUEST\r",
							"// 7. Спарсить request.\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name from request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqName);\r",
							"});\r",
							"\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age from request\", function () {\r",
							"    // console.log(jsonData.age);\r",
							"    // console.log(reqAge);\r",
							"    pm.expect(jsonData.age).to.eql(reqAge);\r",
							"});\r",
							"\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary from request\", function () {\r",
							"    //console.log(typeof jsonData.salary, typeof reqSalary);\r",
							"    pm.expect(jsonData.salary).to.eql(parseInt(reqSalary)); // parseInt - str to int\r",
							"});\r",
							"\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(\"Параметр family из response\", jsonData.family);\r",
							"\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check u_salary_1_5_year from response = salary*4 from request\", function () {\r",
							"    //console.log(typeof jsonData.salary, typeof reqSalary);\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(parseInt(reqSalary*4)); // parseInt - str to int\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();// забрали данные из response body в json (спарсили respons body в json)\r",
							"let reqData = pm.request.url.query.toObject(); // забрали данные из request\r",
							"let reqName = reqData.name; // переменной reqName присвоили свойство объекта \r",
							"let reqAge = reqData.age;\r",
							"let reqSalary = reqData.salary;\r",
							"\r",
							"\r",
							"console.log(reqName);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check NAME from request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqName);\r",
							"});\r",
							"\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check AGE from request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqAge);\r",
							"});\r",
							"\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check SALARY from request\", function () {\r",
							"    //console.log(typeof jsonData.salary, typeof reqSalary);\r",
							"    pm.expect(jsonData.salary).to.eql(parseInt(reqSalary)); // parseInt - str to int\r",
							"});\r",
							"\r",
							"\r",
							"//8. Вывести в кон8. Вывести в консоль параметр family из response.\r",
							"console.log(\"Параметр family из response\", jsonData.family);\r",
							"\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check NAME parameter IN DOG parameter\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check AGE parameter IN DOG parameter\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check NAME parameter = Lucky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check AGE parameter = 4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();// забрали данные из response body в json (спарсили respons body в json)\r",
							"let reqData = pm.request.url.query.toObject(); // забрали данные из request\r",
							"let reqName = reqData.name;\r",
							"let reqAge = reqData.age;\r",
							"let reqSalary = reqData.salary;\r",
							"let respSalary = jsonData.salary;\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check NAME\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqName);\r",
							"});\r",
							"\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check AGE\", function () {\r",
							"   //console.log(typeof jsonData.age, typeof reqAge); \r",
							"   pm.expect(jsonData.age).to.eql(parseInt(reqAge));\r",
							"});\r",
							"\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"salary from request\", reqSalary);\r",
							"\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"salary from response\", respSalary);\r",
							"\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"0-th element of parameter salary from response:\", respSalary[0]);\r",
							"\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"1-st element of parameter salary from response:\", respSalary[1]);\r",
							"\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"2-nd element of parameter salary from response:\", respSalary[2]);\r",
							"\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary[0] from response = 750\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(parseInt(reqSalary));\r",
							"});\r",
							"\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary[1] from response = 2000\", function () {\r",
							"    //console.log(typeof jsonData.salary, typeof reqSalary);\r",
							"    pm.expect(parseInt(jsonData.salary[1])).to.eql(reqSalary*2);\r",
							"});\r",
							"\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary[2] from response = 3000\", function () {\r",
							"    pm.expect(parseInt(jsonData.salary[2])).to.eql(reqSalary*3);\r",
							"});\r",
							"\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"    pm.environment.set(\"name1\", \"klava\");\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"    pm.environment.set(\"age1\", \"25\");\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"    pm.environment.set(\"salary1\", \"2000\");\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"\r",
							"    pm.environment.set(\"name1\", jsonData.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"    pm.environment.set(\"age1\", jsonData.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"    pm.environment.set(\"salary1\", jsonData.salary[0]);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"//let n = jsonData.salary.length;\r",
							"\r",
							"for (let i = 0; i < n; i++) {\r",
							"  console.log(\"salary\", jsonData.salary[i]);\r",
							"}\r",
							"console.log(\"salary\", jsonData.salary[i]);\r",
							"\r",
							"\r",
							"// for (var i = 0; i < data.salary.length; i++) {\r",
							"//     console.log(data.salary[i]);\r",
							"// }\r",
							"\r",
							"// let s =''\r",
							"// jsonData.salary.forEach(function(elemSalary) {\r",
							"//     s = s + \" \" + elemSalary;\r",
							"// });\r",
							"// console.log(\"Список элементов параметра salary\", s);\r",
							"\r",
							"// for (var element of data.salary) {\r",
							"//     console.log(element);\r",
							"// }\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5009/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5009",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"\r",
							"pm.environment.set(\"salary\", \"2000\");\r",
							"\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"pm.environment.set(\"age\", 22);\r",
							"\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"pm.environment.set(\"name\", \"Klava\");\r",
							"\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let reqData = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response has start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response has qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response has qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response has qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response has qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response has person\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary from response = SALARY from request\", function () {\r",
							"    let reqSalary = reqData.salary;\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+reqSalary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months from response = SALARY*2 from request\", function () {\r",
							"    let reqSalary = reqData.salary;\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(reqSalary*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months from response = SALARY*2 from request\", function () {\r",
							"    let reqSalary = reqData.salary;\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(parseFloat(reqSalary*2.7));\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"// You can access the properties of an object in JavaScript in 3 ways:\r",
							"\r",
							"// Dot property accessor: object.property\r",
							"// Square brackets property accessor: object['property']\r",
							"// Object destructuring: const { property } = object\r",
							"pm.test(\"qa_salary_after_1.5_year from response = SALARY*3.3 from request\", function () {\r",
							"    let reqSalary = reqData.salary;\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(parseFloat(reqSalary*3.3));\r",
							"});\r",
							"\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years from response = SALARY*3.8 from request\", function () {\r",
							"    let reqSalary = reqData.salary;\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(parseFloat(reqSalary*3.8));\r",
							"});\r",
							"\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name[1] from respose = SALARY from request\", function () {\r",
							"    let reqSalary = reqData.salary;\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+reqSalary);\r",
							"});\r",
							"\r",
							"\r",
							"// 20. Проверить, что  параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age from respose = AGE from request\", function () {\r",
							"    let reqAge = reqData.age;\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+reqAge);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years from response = SALARY*4.2 from request\", function () {\r",
							"    let reqSalary = reqData.salary;\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(parseFloat(reqSalary*4.2));\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let personArr = [jsonData.person];\r",
							"\r",
							"for (let i = 0; i < personArr.length; i++) {\r",
							"\tconsole.log('Элементы массива person:', personArr[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5006/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5006",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});",
					"",
					"pm.environment.set(\"name\", \"Kristina\");",
					"pm.environment.set(\"age\", 31);",
					"pm.environment.set(\"salary\", 1000);"
				]
			}
		}
	]
}