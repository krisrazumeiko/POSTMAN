HW_2 Postman

http://162.55.220.72:5005/first
1. Отправить запрос.
2. Статус код 200
3. Проверить, что в body приходит правильный string.
-------------------------------------------------------------------
http://162.55.220.72:5005/user_info_3
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Проверить, что name в ответе равно name s request (name вбить руками.)
5. Проверить, что age в ответе равно age s request (age вбить руками.)
6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
7. Спарсить request.
8. Проверить, что name в ответе равно name s request (name забрать из request.)
9. Проверить, что age в ответе равно age s request (age забрать из request.)
10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
11. Вывести в консоль параметр family из response.
12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
	

		// 3. Спарсить response body в json.
		let jsonData = pm.response.json(); //передали ответ сервера в переменную jsonData


		// console.log("Reguest data = ", reqData);
		// console.log("Response data = ", jsonData);


		// 4. Проверить, что name в ответе равно name s request (name вбить руками.)
		pm.test("Check NAME response =  NAME Stasik request", function () {
		    pm.expect(jsonData.name).to.eql("Stasik");
		});


		// 5. Проверить, что age в ответе равно age s request (age вбить руками.)
		pm.test("Check AGE response = AGE 23 request", function () {
		    pm.expect(+jsonData.age).to.eql(23);
		});


		// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
		pm.test("Check SALARY response = SALARY 2000 request", function () {
		    pm.expect(jsonData.salary).to.eql(2000);
		});


		// 7. Спарсить request.
		let reqData = request.data;


		// 8. Проверить, что name в ответе равно name s request (name забрать из request.)
		pm.test("Check NAME response =  NAME from request", function () {
		    let reqName = reqData.name;
		    pm.expect(jsonData.name).to.eql(reqName);
		});


		// 9. Проверить, что age в ответе равно age s request (age забрать из request.)
		pm.test("Check AGE response =  AGE from request", function () {
		    let reqAge = reqData.age;
		    pm.expect(jsonData.age).to.eql(reqAge);
		});


		// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
		pm.test("Check SALARY response =  SALARY from request", function () {
		    let reqSalary = reqData.salary;
		    pm.expect(jsonData.salary).to.eql(+reqSalary);
		});


		// 11. Вывести в консоль параметр family из response.
		console.log("family =", jsonData.family);


		// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
		pm.test("Check u_salary_1_5_year response =  u_salary_1_5_year from request", function () {
		    let reqSalary = reqData.salary;
		    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(reqSalary*4);
		});

-------------------------------------------------------------------
http://162.55.220.72:5005/object_info_3
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Спарсить request.
5. Проверить, что name в ответе равно name s request (name забрать из request.)
6. Проверить, что age в ответе равно age s request (age забрать из request.)
7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
8. Вывести в консоль параметр family из response.
9. Проверить, что у параметра dog есть параметры name.
10. Проверить, что у параметра dog есть параметры age.
11. Проверить, что параметр name имеет значение Luky.
12. Проверить, что параметр age имеет значение 4.

			// http://162.55.220.72:5005/object_info_3
			// 1. Отправить запрос.
			// 2. Статус код 200
			// 3. Спарсить response body в json.
			let jsonData = pm.response.json();
			//console.log(jsonData);

			// 4. Спарсить request.
			let reqData = pm.request.url.query.toObject();
			//console.log(reqData);

			// 5. Проверить, что name в ответе равно name s request (name забрать из request.)
			pm.test("Check NAME response = NAME from request", function () {
			    let reqName = reqData.name;
			    pm.expect(jsonData.name).to.eql(reqName);
			});


			// 6. Проверить, что age в ответе равно age s request (age забрать из request.)
			pm.test("Check AGE response = AGE from request", function () {
			    let reqAge = reqData.age;
			    pm.expect(jsonData.age).to.eql(reqAge);
			});


			// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
			pm.test("Check SALARY response = SALARY from request", function () {
			    let reqSalary = reqData.salary;
			    pm.expect(jsonData.salary).to.eql(+reqSalary);
			});


			// 8. Вывести в консоль параметр family из response.
			console.log("family = ", jsonData.family);

			// 9. Проверить, что у параметра dog есть параметры name.
			pm.test("Dog have NAME param", function () {
			    pm.expect(jsonData.family.pets.dog).to.have.property("name");
			});


			// 10. Проверить, что у параметра dog есть параметры age.
			pm.test("Dog have AGE param", function () {
			    pm.expect(jsonData.family.pets.dog).to.have.property("age");
			});


			// 11. Проверить, что параметр name имеет значение Luky.
			pm.test("NAME param has 'Luky'", function () {
			    pm.expect(jsonData.family.pets.dog.name).to.include("Luky");
			});


			// 12. Проверить, что параметр age имеет значение 4.
			pm.test("AGE param has '4'", function () {
			    pm.expect(jsonData.family.pets.dog.age).to.eql(4);
			});

------------------------------------------------------------


http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Спарсить request.
5. Проверить, что name в ответе равно name s request (name забрать из request.)
6. Проверить, что age в ответе равно age из request (age забрать из request.)
7. Вывести в консоль параметр salary из request.
8. Вывести в консоль параметр salary из response.
9. Вывести в консоль 0-й элемент параметра salary из response.
10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
15. Создать в окружении переменную name
16. Создать в окружении переменную age
17. Создать в окружении переменную salary
18. Передать в окружение переменную name
19. Передать в окружение переменную age
20. Передать в окружение переменную salary
21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.

		
			// http://162.55.220.72:5005/object_info_4
			// 1. Отправить запрос.
			// 2. Статус код 200
			// 3. Спарсить response body в json.
			    let jsonData = pm.response.json();

			// 4. Спарсить request.
			    let reqData = pm.request.url.query.toObject();
			    //console.log(reqData);

			// 5. Проверить, что name в ответе равно name s request (name забрать из request.)
			pm.test("NAME from response = NAME from request", function () {
			    let reqName = reqData.name;
			    pm.expect(jsonData.name).to.eql(reqName);
			});

			// 6. Проверить, что age в ответе равно age из request (age забрать из request.)
			pm.test("AGE from response = AGE from request", function () {
			    let reqAge = reqData.age;
			    pm.expect(jsonData.age).to.eql(+reqAge);
			});

			// 7. Вывести в консоль параметр salary из request.
			console.log("salary from request = ", reqData.salary);

			// 8. Вывести в консоль параметр salary из response.
			console.log("salary from response =", jsonData.salary);

			// 9. Вывести в консоль 0-й элемент параметра salary из response.
			console.log("[0] element of salary from response =", jsonData.salary[0]);

			// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
			console.log("[1] element of salary from response =", jsonData.salary[1]);

			// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
			console.log("[2] element of salary from response =", jsonData.salary[2]);

			// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
			pm.test("[0] element of salary from response = [0] element of salary from request", function () {
			    let reqSalary = reqData.salary;
			    //console.log("reqSalary =", parseInt(reqSalary));
			    pm.expect(jsonData.salary[0]).to.eql(parseInt(reqSalary));
			});

			// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
			pm.test("[1] element of salary from response = [1] element of salary from request", function () {
			    let reqSalary = reqData.salary;
			    //console.log("reqSalary =", parseInt(reqSalary));
			    pm.expect(parseInt(jsonData.salary[1])).to.eql(reqSalary*2);
			});

			// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
			pm.test("[2] element of salary from response = [2] element of salary from request", function () {
			    let reqSalary = reqData.salary;
			    //console.log("reqSalary =", parseInt(reqSalary));
			    pm.expect(parseInt(jsonData.salary[2])).to.eql(reqSalary*3);
			});

			// 15. Создать в окружении переменную name
			pm.environment.set("name1", "robot");

			// 16. Создать в окружении переменную age
			pm.environment.set("age1", 100);

			// 17. Создать в окружении переменную salary
			pm.environment.set("salary", 50000)

			// 18. Передать в окружение переменную name
			pm.environment.set("name", jsonData.name);

			// 19. Передать в окружение переменную age
			pm.environment.set("age", jsonData.age);

			// 20. Передать в окружение переменную salary
			pm.environment.set("salary", jsonData.salary[0]);

			// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary
			//let n = 3;
			let salaryArr = [jsonData.salary];

			for (let i = 0; i < salaryArr.length; i++){
			    console.log(salaryArr[i]);
			}


----------------------------------------------------------------------------------

http://162.55.220.72:5005/user_info_2
1. Вставить параметр salary из окружения в request
2. Вставить параметр age из окружения в age
3. Вставить параметр name из окружения в name
4. Отправить запрос.
5. Статус код 200
6. Спарсить response body в json.
7. Спарсить request.
8. Проверить, что json response имеет параметр start_qa_salary
9. Проверить, что json response имеет параметр qa_salary_after_6_months
10. Проверить, что json response имеет параметр qa_salary_after_12_months
11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
13. Проверить, что json response имеет параметр person
14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.

			// http://162.55.220.72:5005/user_info_2
			// 1. Вставить параметр salary из окружения в request

			pm.environment.set("salary", "2000");

			// 2. Вставить параметр age из окружения в age
			pm.environment.set("age", 22);

			// 3. Вставить параметр name из окружения в name
			pm.environment.set("name", "Klava");

			// 4. Отправить запрос.
			// 5. Статус код 200
			pm.test("Status code is 200", function () {
			    pm.response.to.have.status(200);
			});

			// 6. Спарсить response body в json.
			let jsonData = pm.response.json();

			// 7. Спарсить request.
			let reqData = request.data;

			// 8. Проверить, что json response имеет параметр start_qa_salary
			pm.test("json response has start_qa_salary", function () {
			    pm.expect(jsonData).to.have.property("start_qa_salary");
			});

			// 9. Проверить, что json response имеет параметр qa_salary_after_6_months
			pm.test("json response has qa_salary_after_6_months", function () {
			    pm.expect(jsonData).to.have.property("qa_salary_after_6_months");
			});

			// 10. Проверить, что json response имеет параметр qa_salary_after_12_months
			pm.test("json response has qa_salary_after_12_months", function () {
			    pm.expect(jsonData).to.have.property("qa_salary_after_12_months");
			});

			// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
			pm.test("json response has qa_salary_after_1.5_year", function () {
			    pm.expect(jsonData).to.have.property("qa_salary_after_1.5_year");
			});

			// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
			pm.test("json response has qa_salary_after_3.5_years", function () {
			    pm.expect(jsonData).to.have.property("qa_salary_after_3.5_years");
			});
			// 13. Проверить, что json response имеет параметр person
			pm.test("json response has person", function () {
			    pm.expect(jsonData).to.have.property("person");
			});

			// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
			pm.test("start_qa_salary from response = SALARY from request", function () {
			    let reqSalary = reqData.salary;
			    pm.expect(jsonData.start_qa_salary).to.eql(+reqSalary);
			});

			// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
			pm.test("qa_salary_after_6_months from response = SALARY*2 from request", function () {
			    let reqSalary = reqData.salary;
			    pm.expect(jsonData.qa_salary_after_6_months).to.eql(reqSalary*2);
			});

			// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
			pm.test("qa_salary_after_12_months from response = SALARY*2 from request", function () {
			    let reqSalary = reqData.salary;
			    pm.expect(jsonData.qa_salary_after_12_months).to.eql(parseFloat(reqSalary*2.7));
			});

			// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
			// You can access the properties of an object in JavaScript in 3 ways:

					// Dot property accessor: object.property
					// Square brackets property accessor: object['property']
					// Object destructuring: const { property } = object
			pm.test("qa_salary_after_1.5_year from response = SALARY*3.3 from request", function () {
			    let reqSalary = reqData.salary;
			    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(parseFloat(reqSalary*3.3));
			});


			// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
			pm.test("qa_salary_after_3.5_years from response = SALARY*3.8 from request", function () {
			    let reqSalary = reqData.salary;
			    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(parseFloat(reqSalary*3.8));
			});


			// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
			pm.test("u_name[1] from respose = SALARY from request", function () {
			    let reqSalary = reqData.salary;
			    pm.expect(jsonData.person.u_name[1]).to.eql(+reqSalary);
			});


			// 20. Проверить, что  параметр u_age равен age из request (age забрать из request.)
			pm.test("u_age from respose = AGE from request", function () {
			    let reqAge = reqData.age;
			    pm.expect(jsonData.person.u_age).to.eql(+reqAge);
			});

			// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
			pm.test("u_salary_5_years from response = SALARY*4.2 from request", function () {
			    let reqSalary = reqData.salary;
			    pm.expect(jsonData.person.u_salary_5_years).to.eql(parseFloat(reqSalary*4.2));
			});

			// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
			//let n = 3
			let personArr = [jsonData.person];

			for (let i = 0; i < personArr.length; i++) {
				console.log('Элементы массива person:', personArr[i]);
			}